name: "actions-auth-firebase-adminsdk"
description: "Use google workload identity to run firebase adminsdk script"
author: "ICHINOSE Shogo"

inputs:
  workload_identity_provider:
    description: |-
      The full identifier of the Workload Identity Provider, including the
      project number, pool name, and provider name. If provided, this must be
      the full identifier which includes all parts, for example:
      "projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider".
      This is mutually exclusive with "credentials_json".
    required: true
  service_account:
    description: |-
      Email address or unique identifier of the Google Cloud service account for
      which to generate credentials. This is required if
      "workload_identity_provider" is specified.
    required: true
  audience:
    description: |-
      The value for the audience (aud) parameter in GitHub's generated OIDC
      token. This value defaults to the value of "workload_identity_provider",
      which is also the default value Google Cloud expects for the audience
      parameter on the token.
    default: ""
    required: false

outputs: {}

runs:
  using: "composite"
  steps:
    - id: auth
      name: authorize using the Workload Identity Provider
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        audience: ${{ inputs.audience }}

    # inspired by https://gist.github.com/dylanenabled/5fd0128afe362343cf2a8e9628c4218e
    - id: create-key
      name: Create a temporary key
      shell: bash
      env:
        SERVICE_ACCOUNT: ${{ inputs.service_account }}
      run: |
        set -uexo pipefail

        # create a temporary key
        TEMP_DIR=$(mktemp -d)
        echo "credentials_dir=$TEMP_DIR" >> "$GITHUB_OUTPUT"
        openssl req -x509 -nodes -newkey rsa:2048 -days 1 -keyout "$TEMP_DIR/private_key.pem" -out "$TEMP_DIR/public_key.pem" -subj "/CN=unused"

        # upload the public key
        gcloud iam service-accounts keys upload "$TEMP_DIR/public_key.pem" --iam-account="${SERVICE_ACCOUNT}" --format json > "$TEMP_DIR/uploaded_key.json"
        GCLOUD_PRIVATE_KEY_NAME=$(jq -r '.name | split("/") | last' "$TEMP_DIR/uploaded_key.json")
        export GCLOUD_PRIVATE_KEY_NAME
        echo "gcloud_private_key_name=$GCLOUD_PRIVATE_KEY_NAME" >> "$GITHUB_OUTPUT"
        GCLOUD_CLIENT_ID=$(gcloud iam service-accounts describe $SERVICE_ACCOUNT --format 'value(uniqueId)')
        export GCLOUD_CLIENT_ID

        # create a credentials.json
        touch "$TEMP_DIR/credentials.json"
        chmod 600 "$TEMP_DIR/credentials.json"
        cat "$TEMP_DIR/private_key.pem" | jq --raw-input --slurp '{
          type: "service_account",
          project_id: env.GOOGLE_CLOUD_PROJECT,
          private_key_id: env.GCLOUD_PRIVATE_KEY_NAME,
          private_key: .,
          client_email: env.SERVICE_ACCOUNT,
          client_id: env.GCLOUD_CLIENT_ID,
          auth_uri: "https://accounts.google.com/o/oauth2/auth",
          token_uri: "https://oauth2.googleapis.com/token",
          auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
          client_x509_cert_url: "https://www.googleapis.com/robot/v1/metadata/x509/\(env.SERVICE_ACCOUNT | @uri)"
        }' > "$TEMP_DIR/credentials.json"

        # set environment variables
        echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=$TEMP_DIR/credentials.json" >> "$GITHUB_ENV"
        echo "GOOGLE_APPLICATION_CREDENTIALS=$TEMP_DIR/credentials.json" >> "$GITHUB_ENV"
        echo "GOOGLE_GHA_CREDS_PATH=$TEMP_DIR/credentials.json" >> "$GITHUB_ENV"

    - name: clean up
      uses: shogo82148/actions-post-run@v1
      env:
        SERVICE_ACCOUNT: ${{ inputs.service_account }}
        TEMP_DIR: ${{ steps.create-key.outputs.credentials_dir }}
        GCLOUD_PRIVATE_KEY_NAME: ${{ steps.create-key.outputs.gcloud_private_key_name }}
      with:
        post: |
          set -uexo pipefail

          rm -rf "$TEMP_DIR"
          gcloud iam service-accounts keys delete ${GCLOUD_PRIVATE_KEY_NAME} --iam-account=${SERVICE_ACCOUNT} --quiet

branding:
  icon: "edit"
  color: "gray-dark"
